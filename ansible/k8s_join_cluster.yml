# Joining K8s cluster (see https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/)
- name: Generating K8s token and join command
  hosts: init_controller # the specified node MUST be part of the cluster already
  
  tasks:
  - name: Generate join token and store join command
    shell: kubeadm token create --print-join-command
    register: join_cmd

  - name: Getting cluster nodes
    shell: kubectl get nodes | awk 'NR > 1 {print $1}'
    register: nodes
    changed_when: false

- name: Making control planes join the cluster
  hosts: controller
  vars:
    node_name_with_default: "{{ node_name | default(inventory_hostname) }}"

  tasks:
  - name: Join new controller nodes as control plane
    shell: "{{ join_cmd.stdout }} --node-name {{ node_name_with_default }} --control-plane"
    # Only join if the current controller is not part of the cluster already, as indicated by `kubectl get nodes`, as init_controller MUST be part of 
    #  the cluster already it's node name will be included in the list as well.
    when: node_name_with_default not in nodes.stdout_lines

- name: Making worker nodes join the cluster
  hosts: worker
  vars:
    node_name_with_default: "{{ node_name | default(inventory_hostname) }}"

  tasks:
  - name: Checking if node is also a control-plane
    set_fact: 
      is_control_plane: inventory_hostname in groups['controller']

  - name: Checking if node has control-plane taint
    shell: kubectl get node {{ node_name_with_default }} -o json | jq '.spec.taints? // [] | map(.key) | contains(["node-role.kubernetes.io/control-plane"])'
    register: has_taint
    when: is_control_plane
    changed_when: false

  - name: Allowing pods to be run on control-plane if necessary
    shell: kubectl taint node {{ node_name_with_default }} node-role.kubernetes.io/control-plane- --validate=ignore
    # only runs if the target is also a control plane, this is disabled by default for security therefore not recommended,
    # but may be required in a single machine cluster
    when:
      - is_control_plane
      - has_taint.stdout == "true"

  - name: Checking if node is excluded from load-balancer
    shell: kubectl get node {{ node_name_with_default }} -o json | jq '.metadata.labels // {} | has("node.kubernetes.io/exclude-from-external-load-balancers")'
    register: is_excluded
    when: is_control_plane
    changed_when: false

  - name: Allowing control-plane to be targed by load-balancer
    shell: kubectl label node {{ node_name_with_default }} node.kubernetes.io/exclude-from-external-load-balancers- 
    when:
      - is_control_plane
      - is_excluded.stdout == "true"

  - name: Joining cluster
    shell: "{{ join_cmd.stdout }} --node-name {{ node_name_with_default }}"
    # control planes are already part of the cluster as they initialized it so no need to join
    when: node_name_with_default not in nodes.stdout_lines
    become: true
